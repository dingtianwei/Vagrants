---
- name: "Install dependency"
  apt:
    name: "{{ item.line }}"
    state: present
  with_items:
    - {line: 'socat'}
  tags: worker_app

- name: "Create kubernetes directory"
  file:
    path: "{{ item.line }}"
    owner: root
    group: root
    mode: 0755
    state: directory
  with_items:
    - {line: '/etc/kubernetes/pki'}
    - {line: '/etc/kubernetes/manifests'}
    - {line: '/etc/systemd/system/kubelet.service.d'}
    - {line: "{{ kubernetes.kubelet_dir }}"}
  tags: dir

- name: "Install worker node"
  copy:
    src: "{{ downloads_dir }}/kubernetes-{{ kubernetes.version }}/{{ item.line }}"
    dest: /usr/bin/
    owner: root
    group: root
    mode: 0750
  with_items:
    - { line: "kubelet"}
    - { line: "kube-proxy"}
  tags: install_worker

- name: "Distribution worker certs"
  copy:
    src: "{{ item.line }}"
    dest: "/etc/kubernetes/pki/"
    owner: root
    group: root
    mode: 0644
  with_items:
    - {line: "{{ cert.dir }}/ca.pem"}
    - {line: "{{ cert.dir }}/ca.key"}
    - {line: "{{ cert.dir }}/front-proxy-ca.pem"}
    - {line: "{{ cert.dir }}/{{ inventory_hostname }}/kube-proxy.pem"}
    - {line: "{{ cert.dir }}/{{ inventory_hostname  }}/kube-proxy.key"}
  tags:
    - dis_worker_certs
    - dis_certs

- name: "Get bootstrap-token-secret"
  shell: cat /etc/kubernetes/pki/token | grep -v "^#" | awk -F '.' '{print $2}'
  register: token_secret
  tags:
    - get_token_secret
    - bootstrap_token
  changed_when: false

- name: "Distribution worker kubeconfig"
  template:
    src: "kubeconfig/{{ item.src }}"
    owner: root
    group: root
    mode: 0640
    dest: "{{ item.dest }}"
  with_items:
    - {src: "bootstrap-kubelet.kubeconfig.j2",dest: "/etc/kubernetes/bootstrap-kubelet.kubeconfig" }
    - {src: "kube-proxy.kubeconfig.j2",dest: "/etc/kubernetes/kube-proxy.kubeconfig" }
  tags: dis_worker_kubeconfig

- name: "Check node resolve"
  stat:
    path: "/run/systemd/resolve/resolv.conf"
  register: resolve_conf
  

- name: "Distribution worker config"
  template:
    src: "config/{{ item.src }}"
    owner: root
    group: root
    mode: 0640
    dest: "{{ item.dest }}"
  with_items:
    - {src: "kubelet-conf.yml.j2",dest: "/etc/kubernetes/kubelet-conf.yml" }
    - {src: "10-kubelet.conf.j2",dest: "/etc/systemd/system/kubelet.service.d/10-kubelet.conf" }
    - {src: "kube-proxy.conf.j2",dest: "/etc/kubernetes/kube-proxy.conf" }
  tags: dis_worker_config

- name: "Distribution worker system unit"
  template:
    src: "systemd_unit/{{ item.src }}"
    owner: root
    group: root
    mode: 0644
    dest: "{{ item.dest }}"
  with_items:
    - {src: "kubelet.service.j2",dest: "/lib/systemd/system/kubelet.service" }
    - {src: "kube-proxy.service.j2",dest: "/lib/systemd/system/kube-proxy.service" }
  tags: dis_worker_systemd


- name: "Restart kubelet"
  systemd:
    name: kubelet
    state: restarted
    daemon_reload: yes
    enabled: yes
  tags: restart_kubelet

- name: "Waiting kubelet starting"
  wait_for:
    host: "{{ ansible_host }}"
    port: 10250
    delay: 5
    sleep: 2
  tags: healthcheck

- name: "kubelet health check"
  uri:
    url: "http://{{ ansible_host }}:10248/healthz"
    return_content: yes
    validate_certs: no
  register: kubelet
  failed_when: "'ok' not in kubelet.content"
  connection: local
  tags: healthcheck

- name: "Restart kube-proxy"
  systemd:
    name: kube-proxy
    state: restarted
    daemon_reload: yes
    enabled: yes
  tags: restart_proxy

- name: "Waiting kube-proxy starting"
  wait_for:
    host: "{{ ansible_host }}"
    port: 10256
    delay: 5
    sleep: 2
  tags: healthcheck

- name: "kube-proxy health check"
  uri:
    url: "http://{{ ansible_host }}:10256/healthz"
    return_content: yes
    validate_certs: no
    status_code: 200
  register: proxy
  connection: local
  tags: healthcheck

